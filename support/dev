#!/bin/bash

function usage {
  printf "Development environment in docker containers\n"
  printf "Synopsys:\n"
  printf "  $0 [-h] [-d <working_directory>] [-e <key=value>] <command> <image> [<commands>] \n"
  printf "\n"
  printf "Arguments:\n"
  printf "  <command> : Command to be executed:\n"
  printf "    run     : run a new container instance.\n"
  printf "    exec    : execute <commands> in running instance.\n"
  printf "    ps      : process status for running instances.\n"
  printf "  <image>   : Docker image name or id.\n"
  printf "\n"
  printf "Options:\n"
  printf "  -d <working_dir> : Working directory that will be mounted in the development container under '/workspace'.\n"
  printf "  -e <key>[=<value>] : environments parameters which should be passed to the docker instance.\n"
  printf "  -h        : This help message.\n"
}

function initialize {
  unset CMD_NAME
  unset DOCKER_IMAGE
  unset DOCKER_COMMAND

  WORKING_DIR=$PWD
  DOCKER_ENV=""
}

function parse_args # [args ...]
{
  # check paramters
#  if [ $# -lt 1 ]; then
#    usage
#    exit 1
#  fi

  typeset opt
  while getopts 'hd:e:' opt ; do
    case "$opt" in
      h)
        usage
        exit 0
        ;;
      d)
        WORKING_DIR=$OPTARG
        ;;
      e)
        DOCKER_ENV+=" -e $OPTARG"
        ;;
      *)
        >&2 echo "Invalid option '-$opt'"
        exit 1
        ;;
    esac
  done

  shift $((OPTIND -1))
  if [ $# -ge 1 ]; then
    CMD_NAME=$1
    shift
  else
    >&2 echo "Missing argument <command>."
    exit 1
  fi

  if [ $# -ge 1 ]; then
    DOCKER_IMAGE=$1
    shift
  else
    >&2 echo "Missing argument <image>."
    exit 1
  fi

  # Make sure all remaining args are passed to docker as command
  if [ $# -ne 0 ] ; then
    DOCKER_COMMAND="$@"
  fi
}

function ask_yes {
  local question=$1

  if [ ${CMD_YES} -eq 1 ] ; then
    # do not ask, answer as if was "yes"
    return 0
  fi

  read -n 1 -r -p "${question} [Y/n] " response
  if [ -n "${response}" ]; then
    echo "" # only one char was typed and no line feed
  else
    response="y"
  fi
  response=${response,,} # tolower
  if [[ $response =~ ^(yes|y| ) ]]; then
    # answer was "yes"
    return 0
  fi
  # aswer was not "yes"
  return 1
}


#alias dev-exec-docker='docker exec -it $(docker ps -q | xargs --no-run-if-empty docker inspect --format "{{ if eq .Config.Image \"${DEV_DOCKER_IMAGE:-iconoeugen/fedora-dev}\" }}{{ range .Mounts }}{{ if eq .Source \"$PWD\" }}{{ $.ID }}{{ end }}{{ end }}{{ end }}") /bin/bash'


#alias dev-run-ruby='export DEV_DOCKER_IMAGE=iconoeugen/ruby-dev && dev-run-docker'
#alias dev-exec-ruby='export DEV_DOCKER_IMAGE=iconoeugen/ruby-dev && dev-exec-docker'

#export GITLAB_REPO=https://gitlab.com/hvlad/gitlab-ce.git
#alias dev-run-gitlab='export DEV_DOCKER_OPTIONS="-e GITLAB_REPO=${GITLAB_REPO}" && export DEV_DOCKER_IMAGE=iconoeugen/gitlab-dev && dev-run-docker'
#alias dev-exec-gitlab='export DEV_DOCKER_OPTIONS="-e GITLAB_REPO=${GITLAB_REPO}" && export DEV_DOCKER_IMAGE=iconoeugen/gitlab-dev && dev-exec-docker'

function find_image_id() {
    local docker_image=$1
    local working_dir=$2
    local image_id=$(docker ps -q | xargs --no-run-if-empty docker inspect --format "{{ if eq .Config.Image \"${docker_image}\" }}{{ range .Mounts }}{{ if eq .Source \"${working_dir}\" }}{{ $.ID }}{{ end }}{{ end }}{{ end }}")

    [ -n $image_id ] && echo $image_id && return 0 || return 1
}

function find_image_name() {
    local docker_image=$1
    local working_dir=$2
    local image_name=$(docker ps -q | xargs --no-run-if-empty docker inspect --format "{{ if eq .Config.Image \"${docker_image}\" }}{{ range .Mounts }}{{ if eq .Source \"${working_dir}\" }}{{ $.Name }}{{ end }}{{ end }}{{ end }}")
    image_name=${image_name:1}

    [ -n $image_id ] && echo $image_name && return 0 || return 1
}

function docker-run() {
  local image_name=$(find_image_name ${DOCKER_IMAGE} ${WORKING_DIR})

  [ ! "x$image_name" = "x" ] && >&2 printf "Container '$image_name' for image '${DOCKER_IMAGE}' already running in working directory '${WORKING_DIR}'.\nUse command '$0 exec ${DOCKER_IMAGE} ${WORKING_DIR}' to enter running container.\n" && exit 1

  mkdir -p ${WORKING_DIR}/.home
  docker run -it --rm --net=host \
    -e USER=$(id -u -n) -e GROUP=$(id -g -n) -u "$(id -u):$(id -g)" \
    -v ${WORKING_DIR}:/workspace \
    -v ${WORKING_DIR}/.home:/home/default \
    -v ~/.ssh:/home/default/.ssh \
    -e DISPLAY=${DISPLAY} \
    -v ~/.Xauthority:/home/default/.Xauthority \
    -v /dev/shm:/dev/shm \
    ${DOCKER_ENV} ${DOCKER_IMAGE} ${DOCKER_COMMAND}
}

function docker-exec() {
  local image_name=$(find_image_name ${DOCKER_IMAGE} ${WORKING_DIR}) 

  [ "x$image_name" = "x" ] && >&2 echo "No container found for image '${DOCKER_IMAGE}' running in working directory '${WORKING_DIR}'." && exit 1

  docker exec -it $image_name ${DOCKER_COMMAND:-/bin/bash}
}

function docker-ps() {
  local image_name=$(find_image_name ${DOCKER_IMAGE} ${WORKING_DIR}) 

  [ "x$image_name" = "x" ] && >&2 echo "No container found for image '${DOCKER_IMAGE}' running in working directory '${WORKING_DIR}'." && exit 1

  docker ps --filter "name=$image_name"
}

initialize

parse_args "$@"

case "${CMD_NAME}" in 
  run)
    docker-run
    ;;
  exec)
    docker-exec
    ;;
  ps)
    docker-ps
    ;;
  *)
    >&2 echo "Unknown command: '${CMD_NAME}'"
    usage
    exit 1
esac
